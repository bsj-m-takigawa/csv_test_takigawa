openapi: 3.0.3
info:
  title: CSV Horizon API
  version: 1.0.0
  description: ユーザー管理システムのREST API仕様
servers:
  - url: http://localhost:8000/api
    description: 開発環境
paths:
  /users:
    get:
      summary: ユーザー一覧取得（ページネーション付き）
      tags: [Users]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
          description: ページ番号
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: 1ページあたりの件数
        - in: query
          name: sort
          schema: { type: string, enum: [name,email,membership_status,created_at,updated_at], default: created_at }
          description: ソート対象フィールド
        - in: query
          name: order
          schema: { type: string, enum: [asc,desc], default: desc }
          description: ソート順
        - in: query
          name: q
          schema: { type: string, maxLength: 255 }
          description: 検索クエリ（名前、メール、電話番号で部分一致検索）
        - in: query
          name: status
          schema: { type: string }
          description: ステータスフィルター（カンマ区切りで複数指定可能 例：active,pending）
        - in: query
          name: created
          schema: { type: string, enum: [today,week,month,year] }
          description: 作成日フィルター
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
    post:
      summary: ユーザー作成
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '422': { description: Validation error }
  /users/{id}:
    get:
      summary: ユーザー詳細取得
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Not Found }
    put:
      summary: ユーザー更新
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Not Found }
        '422': { description: Validation error }
    delete:
      summary: ユーザー削除
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
        '404': { description: Not Found }
  /users/status-counts:
    get:
      summary: ステータス別ユーザー数取得
      tags: [Users]
      description: 各ステータスのユーザー数を取得
      parameters:
        - in: query
          name: q
          schema: { type: string, maxLength: 255 }
          description: 検索クエリ（検索条件下でのカウント）
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  active: { type: integer, description: アクティブユーザー数 }
                  inactive: { type: integer, description: 非アクティブユーザー数 }
                  pending: { type: integer, description: 保留中ユーザー数 }
                  expired: { type: integer, description: 期限切れユーザー数 }
                  total: { type: integer, description: 合計ユーザー数 }
  /users/import:
    post:
      summary: CSVインポート
      tags: [CSV]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                csv_file:
                  type: string
                  format: binary
      responses:
        '200': { description: Accepted }
        '400': { description: Bad CSV }
  /users/export:
    get:
      summary: CSVエクスポート
      tags: [CSV]
      responses:
        '200':
          description: CSV
          content:
            text/csv: { schema: { type: string, format: binary } }
components:
  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
        phone_number: { type: string, nullable: true }
        address: { type: string, nullable: true }
        birth_date: { type: string, format: date, nullable: true }
        gender: { type: string, enum: [male,female,other], nullable: true }
        membership_status: { type: string, enum: [active,inactive,pending,expired], nullable: true }
        notes: { type: string, nullable: true }
        profile_image: { type: string, format: uri, nullable: true }
        points: { type: integer }
        last_login_at: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    UserCreate:
      type: object
      required: [name,email,password,password_confirmation]
      properties:
        name: { type: string, maxLength: 255 }
        email: { type: string, format: email, maxLength: 255 }
        password: { type: string, minLength: 8 }
        password_confirmation: { type: string, minLength: 8 }
        phone_number: { type: string, maxLength: 20 }
        address: { type: string, maxLength: 255 }
        birth_date: { type: string, format: date }
        gender: { type: string, enum: [male,female,other] }
        membership_status: { type: string, enum: [active,inactive,pending,expired] }
        notes: { type: string, maxLength: 2000 }
        profile_image: { type: string, format: uri }
    UserUpdate:
      type: object
      properties:
        name: { type: string, maxLength: 255 }
        email: { type: string, format: email, maxLength: 255 }
        password: { type: string, minLength: 8 }
        password_confirmation: { type: string, minLength: 8 }
        phone_number: { type: string, maxLength: 20 }
        address: { type: string, maxLength: 255 }
        birth_date: { type: string, format: date }
        gender: { type: string, enum: [male,female,other] }
        membership_status: { type: string, enum: [active,inactive,pending,expired] }
        notes: { type: string, maxLength: 2000 }
        profile_image: { type: string, format: uri }
    UserList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }
        meta:
          type: object
          properties:
            total: { type: integer, description: 合計件数 }
            current_page: { type: integer, description: 現在のページ番号 }
            per_page: { type: integer, description: 1ページあたりの件数 }
            last_page: { type: integer, description: 最終ページ番号 }
            from: { type: integer, nullable: true, description: 表示開始位置 }
            to: { type: integer, nullable: true, description: 表示終了位置 }
        links:
          type: object
          properties:
            first: { type: string, format: uri, description: 最初のページURL }
            last: { type: string, format: uri, description: 最後のページURL }
            prev: { type: string, format: uri, nullable: true, description: 前のページURL }
            next: { type: string, format: uri, nullable: true, description: 次のページURL }
